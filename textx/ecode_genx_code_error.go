// Package textx GENERATED BY code_error DO NOT EDIT
package textx

import (
	"errors"
	"fmt"
)

func (e Ecode) Message() string {
	switch e {
	default:
		return fmt.Sprintf("[textx:%d] unknown", e)
	case ECODE_UNDEFINED:
		return "[textx:0] undefined"
	case ECODE__MARSHAL_TEXT_INVALID_INPUT:
		return "[textx:1] marshal text got invalid input"
	case ECODE__MARSHAL_TEXT_FAILED:
		return "[textx:2] failed to marshal text"
	case ECODE__MARSHAL_URL_INVALID_INPUT:
		return "[textx:3] marshal url got invalid input"
	case ECODE__MARSHAL_URL_FAILED:
		return "[textx:4] failed to marshal url"
	case ECODE__UNMARSHAL_TEXT_INVALID_INPUT:
		return "[textx:5] unmarshal text got invalid input"
	case ECODE__UNMARSHAL_TEXT_FAILED:
		return "[textx:6] failed to unmarshal text"
	case ECODE__UNMARSHAL_URL_INVALID_INPUT:
		return "[textx:7] unmarshal url got invalid input"
	case ECODE__UNMARSHAL_URL_FAILED:
		return "[textx:8] failed to unmarshal url"
	}
}

func NewEcodeError(code Ecode) error {
	return &EcodeError{
		code: code,
	}
}

func NewEcodeErrorf(code Ecode, msg string, args ...any) error {
	return &EcodeError{
		code: code,
		msg:  msg,
		args: args,
	}
}

func NewEcodeErrorWrap(code Ecode, cause error) error {
	if cause == nil {
		return nil
	}
	return &EcodeError{
		code:  code,
		args:  []any{cause},
		cause: cause,
	}
}

func NewEcodeErrorWrapf(code Ecode, cause error, msg string, args ...any) error {
	if cause == nil {
		return nil
	}
	return &EcodeError{
		code:  code,
		msg:   msg,
		args:  append(args, cause),
		cause: cause,
	}
}

type EcodeError struct {
	code  Ecode
	msg   string
	args  []any
	cause error
}

func (e *EcodeError) Error() string {
	msg := e.code.Message()
	if len(e.msg) > 0 {
		msg += ". " + e.msg
	}
	if e.cause != nil {
		msg += ". [cause: %+v]"
	}
	return fmt.Sprintf(msg, e.args...)
}

func (e *EcodeError) Code() Ecode {
	return e.code
}

func (e *EcodeError) Is(err error) bool {
	var target *EcodeError
	return errors.As(err, &target) && target.code == e.code
}

func (e *EcodeError) Unwrap() error {
	return e.cause
}
